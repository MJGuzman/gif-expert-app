{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","data","type","value","placeholder","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","URL","encodeURI","fetch","resp","json","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,sBAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GAAD,OAAWL,GAAX,mBAA0BK,OACxCJ,EAAc,KAId,SACE,uBACEK,KAAK,OACLC,MAAOP,EACPQ,YAAY,kBACZC,SAhBoB,SAACN,GACzBF,EAAcE,EAAEO,OAAOH,a,QCIZI,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObnB,EAPa,EAObA,KAEFoB,EAAOpB,EAAKqB,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAbhB,kBAiBdY,GAjBc,4CAAH,sDCuBLM,EAlBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACjB,ECH0B,SAACA,GAC3B,MAA0BnB,mBAAS,CAAEM,KAAM,GAAI2B,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACP,GACtBQ,YAAW,WACTH,EAAS,CACP7B,KAAMwB,EACNG,SAAS,MAEV,UAEJ,CAACd,IAEGe,EDX2BK,CAAapB,GAAjCW,EAAd,EAAQxB,KAAc2B,EAAtB,EAAsBA,QAEtB,OACE,gCACE,6BAAKd,IACJc,GAAW,aACZ,qBAAKlB,UAAU,YAAf,SACGe,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEQjBW,EAlBM,WACnB,MAAoCxC,mBAAS,CAAC,WAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACE,gCACE,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG0C,EAAWd,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCVlBuB,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.fbb48a65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [InputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setCategories((data) => [InputValue, ...data]);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={InputValue}\r\n        placeholder=\"Write something\"\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card-item\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=RElCqu38O2naf2xhCBARQUwiryWyogq9`;\r\n\r\n  const resp = await fetch(URL);\r\n\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\nimport GifGridItem from \"../components/GifGridItem\";\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{category}</h3>\r\n      {loading && \"Loading...\"}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGif\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((images) => {\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: images,\r\n          loading: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Toyota\"]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Gif Expert Code</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./components/GifExpertApp\";\nimport \"../src/index.css\";\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(<GifExpertApp />, divRoot);\n"],"sourceRoot":""}